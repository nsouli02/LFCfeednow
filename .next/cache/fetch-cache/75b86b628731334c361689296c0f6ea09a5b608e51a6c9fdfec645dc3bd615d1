{"kind":"FETCH","data":{"headers":{"alt-svc":"h3=\":443\"; ma=86400","cache-control":"max-age=0, must-revalidate, private","connection":"keep-alive","content-security-policy":"default-src * data: 'unsafe-eval' 'unsafe-inline' blob:","content-type":"application/xml; charset=UTF-8","date":"Tue, 12 Aug 2025 11:57:06 GMT","expires":"Tue, 12 Aug 2025 11:57:06 GMT","referrer-policy":"no-referrer-when-downgrade","server":"nginx","set-cookie":"newsletterTrackingCampaign=deleted; expires=Mon, 12-Aug-2024 11:57:05 GMT; Max-Age=0; path=/","strict-transport-security":"max-age=31536000; includeSubDomains; preload","transfer-encoding":"chunked","x-content-type-options":"nosniff","x-frame-options":"SAMEORIGIN","x-xss-protection":"1; mode=block"},"body":"","status":200,"url":"https://www.givemesport.com/feed/"},"revalidate":300,"tags":[]}